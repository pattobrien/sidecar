// Mocks generated by Mockito 5.3.2 from annotations
// in sidecar/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:cli_util/cli_logging.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sidecar/src/protocol/communication/communication.dart' as _i4;
import 'package:sidecar/src/protocol/models/log_record.dart' as _i5;
import 'package:sidecar/src/reports/reporter.dart' as _i6;
import 'package:sidecar/src/reports/stdout_reporter.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUri_0 extends _i1.SmartFake implements Uri {
  _FakeUri_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProgress_1 extends _i1.SmartFake implements _i2.Progress {
  _FakeProgress_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [StdoutReporter].
///
/// See the documentation for Mockito's code generation for more information.
class MockStdoutReporter extends _i1.Mock implements _i3.StdoutReporter {
  MockStdoutReporter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_0(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);
  @override
  set uri(Uri? _uri) => super.noSuchMethod(
        Invocation.setter(
          #uri,
          _uri,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Progress get progress => (super.noSuchMethod(
        Invocation.getter(#progress),
        returnValue: _FakeProgress_1(
          this,
          Invocation.getter(#progress),
        ),
      ) as _i2.Progress);
  @override
  set progress(_i2.Progress? _progress) => super.noSuchMethod(
        Invocation.setter(
          #progress,
          _progress,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void init(Uri? uri) => super.noSuchMethod(
        Invocation.method(
          #init,
          [uri],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void refresh() => super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void handleError(
    Object? object,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #handleError,
          [
            object,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void handleLintNotification(_i4.LintNotification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #handleLintNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void handleLog(_i5.LogRecord? log) => super.noSuchMethod(
        Invocation.method(
          #handleLog,
          [log],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void print({bool toDisk = false}) => super.noSuchMethod(
        Invocation.method(
          #print,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Reporter].
///
/// See the documentation for Mockito's code generation for more information.
class MockReporter extends _i1.Mock implements _i6.Reporter {
  MockReporter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void handleLintNotification(_i4.LintNotification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #handleLintNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void handleError(
    Object? object,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #handleError,
          [
            object,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void handleLog(_i5.LogRecord? log) => super.noSuchMethod(
        Invocation.method(
          #handleLog,
          [log],
        ),
        returnValueForMissingStub: null,
      );
}
